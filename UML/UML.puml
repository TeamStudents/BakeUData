@startuml BakeUPSo
class istream << (T,#FF7700) >>
class ostream << (T,#FF7700) >>
class Driver {
  +static backup(srcDir: string, remoteName: string, packAlgo: string, compressAlgo: string, encryptAlgo: string)
  +static restore(remoteName: string, dstDir: string, packAlgo: string, compressAlgo: string, encryptAlgo: string)
  +static list()
  +static remove(remoteName: string)
}

class BackupTask {
  -packer: IPacker
  -compressor: ICompressor
  -encryptor: IEncryptor
  -storage: IRemoteStorage
  -remoteName: string
  +BackupTask(packer: IPacker, compressor: ICompressor, encryptor: IEncryptor, storage: IRemoteStorage, remoteName: string)
  +run(srcDir: string)
}

class RestoreTask {
  -packer: IPacker
  -compressor: ICompressor
  -encryptor: IEncryptor
  -storage: IRemoteStorage
  +RestoreTask(packer: IPacker, compressor: ICompressor, encryptor: IEncryptor, storage: IRemoteStorage)
  +run(remoteName: string, dstDir: string)
}

class BackupCatalog {
  -storage: IRemoteStorage
  -cache: vector<json>
  +BackupCatalog(storage: IRemoteStorage)
  +refresh()
  +list(): vector<json>
  +remove(remoteName: string)
}

class Pipeline {
  +run(src: istream, dst: ostream, chain: vector<Filter>)
}

interface IPacker {
  +pack(srcDir: string, out: ostream, engine: FilterEngine)
  +unpack(in: istream, dstDir: string)
}

interface ICompressor {
  +compress(in: istream, out: ostream)
  +decompress(in: istream, out: ostream)
}

interface IEncryptor {
  +encrypt(in: istream, out: ostream, aad: AAD)
  +decrypt(in: istream, out: ostream, aad: AAD)
}

interface IRemoteStorage {
  +upload(localFile: string, remotePath: string)
  +download(remotePath: string, localFile: string)
  +list(remoteDir: string): vector<string>
  +remove(remotePath: string)
}

interface IFilter {
  +accept(e: directory_entry): bool
}

class TarPacker {
  +pack(srcDir: string, out: ostream, engine: FilterEngine)
  +unpack(in: istream, dstDir: string)
}

class GzipCompressor {
  +compress(in: istream, out: ostream)
  +decompress(in: istream, out: ostream)
}

class AesGcmEncryptor {
  +encrypt(in: istream, out: ostream, aad: AAD)
  +decrypt(in: istream, out: ostream, aad: AAD)
}

class SshStorage {
  +upload(localFile: string, remotePath: string)
  +download(remotePath: string, localFile: string)
  +list(remoteDir: string): vector<string>
  +remove(remotePath: string)
}

class FilenameFilter {
  +accept(e: directory_entry): bool
}

class SizeFilter {
  +accept(e: directory_entry): bool
}

class CreationTimeFilter {
  +accept(e: directory_entry): bool
}

class ModificationTimeFilter {
  +accept(e: directory_entry): bool
}

class RegexFilter {
  +accept(e: directory_entry): bool
}

class GroupFilter {
  +accept(e: directory_entry): bool
}

class Factory {
  +instance(): Factory
  +registerCreator(key: string, c: Creator)
  +create(key: string): Interface
}

class HeaderBlock {
  -format_version: uint32
  -backup_time_utc: uint64
  -hostname: string
  -source_paths: vector<string>
  -pipeline: vector<json>
  -filters: json
}

class HeaderCodec {
  +serialize(h: HeaderBlock, key: string): string
  +deserialize(blob: string, key: string): HeaderBlock
}

class Logger {
  +info(msg: string)
  +warn(msg: string)
  +error(msg: string)
}

class BackupException {
  +BackupException(msg: string)
}


BackupTask -down-> IPacker
BackupTask -down-> ICompressor
BackupTask -down-> IEncryptor
BackupTask -down-> IRemoteStorage
RestoreTask -down-> IPacker
RestoreTask -down-> ICompressor
RestoreTask -down-> IEncryptor
RestoreTask -down-> IRemoteStorage
BackupCatalog -down-> IRemoteStorage
TarPacker -right-> IPacker
GzipCompressor -right-> ICompressor
AesGcmEncryptor -right-> IEncryptor
SshStorage -right-> IRemoteStorage
FilenameFilter -right-> IFilter
SizeFilter -right-> IFilter
CreationTimeFilter -right-> IFilter
ModificationTimeFilter -right-> IFilter
RegexFilter -right-> IFilter
GroupFilter -right-> IFilter
@enduml